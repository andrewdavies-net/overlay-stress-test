apiVersion: tekton.dev/v1
kind: Task
metadata:
  creationTimestamp: '2024-11-28T15:18:38Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          .: {}
          'f:params': {}
          'f:steps': {}
          'f:volumes': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2024-11-28T15:18:38Z'
  name: buildah-build
  namespace: overlay-build
  resourceVersion: '4219571'
  uid: 72479cfe-14ec-4fee-a11c-1d2ecc235893
spec:
  params:
    - name: image-name
      type: string
    - default: .
      name: context-dir
      type: string
    - default: Containerfile
      name: containerfile-path
      type: string
    - default: ''
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: 'false'
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string
  steps:
    - computeResources: {}
      env:
        - name: STORAGE_DRIVER
          value: vfs
        - name: BUILDAH_LAYER
          value: 'true'
      image: 'registry.redhat.io/rhel8/buildah:8.9'
      name: build
      script: |
        #!/bin/bash
        set -Eeuo pipefail

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

          # if config.json exists at workspace root, we use that
          if test -f "$(workspaces.dockerconfig.path)/config.json"; then
            export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

          # else we look for .dockerconfigjson at the root
          elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
            cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
            export DOCKER_CONFIG="$HOME/.docker"

          # need to error out if neither files are present
          else
            echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
            exit 1
          fi
        fi
        echo "Loading Image from OCI"
        buildah pull oci-archive:/srv/oci-images/common:v1.tar
        buildah images
        image_id=$(buildah images -q | head -n 1)
        buildah tag $image_id common:v1
        buildah images
        echo "Building Image"
        buildah bud $(params.BUILD_EXTRA_ARGS) -t build:v1 -f $(workspaces.source-workspace.path)/$(params.containerfile-path) $(workspaces.source-workspace.path)/$(params.context-dir)
        echo "create manifest"
        buildah images
        buildah push --all localhost/build:v1 docker://$(params.image-name)
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: container-storage
  volumes:
    - emptyDir: {}
      name: container-storage
  workspaces:
    - description: Workspace containing source code
      name: source-workspace
    - mountPath: /srv/oci-images
      name: oci-images
