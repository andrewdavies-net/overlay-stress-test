apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-build
spec:
  params:
  - name: image-name
    type: string
  - name: context-dir
    type: string
    default: .
  - name: containerfile-path
    type: string
    default: Containerfile
  - name: BUILD_EXTRA_ARGS
    type: string
    default: ''
    description: Extra parameters passed for the build command when building images.
  - name: SKIP_PUSH
    type: string
    default: 'false'
    description: Skip pushing the built image
  workspaces:
  - name: source-workspace
    description: Workspace containing source code
  - name: oci-images
    mountPath: /srv/oci-images
  volumes:
  - name: container-storage
    emptyDir: {}
  steps:
  - name: build
    image: registry.redhat.io/rhel8/buildah:8.9
    env:
    - name: STORAGE_DRIVER
      value: vfs
    - name: BUILDAH_LAYER
      value: "true"
    # args:
    # - "$(params.architectures[*])"
    script: |
      #!/bin/bash
      set -Eeuo pipefail

      [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

      if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

        # if config.json exists at workspace root, we use that
        if test -f "$(workspaces.dockerconfig.path)/config.json"; then
          export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        # else we look for .dockerconfigjson at the root
        elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
          cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
          export DOCKER_CONFIG="$HOME/.docker"

        # need to error out if neither files are present
        else
          echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
          exit 1
        fi
      fi
      echo "Loading Image from OCI"
      buildah pull --name common:v1 oci-archive:/srv/oci-images/common:v1.tar
      buildah images
      image_id=$(buildah images -q | head -n 1)
      buildah tag $image_id common:v1
      echo "Building Image"
      buildah bud $(params.BUILD_EXTRA_ARGS) -t localhost/build:v1 -f $(workspaces.source-workspace.path)/$(params.containerfile-path) $(workspaces.source-workspace.path)/$(params.context-dir)
      echo "create manifest "
      buildah manifest create localhost/build "build:v1"
      buildah manifest push --all localhost/build:v1 docker://$(params.image-name)
    securityContext:
      capabilities:
        add:
          - SETFCAP
    volumeMounts:
    - name: container-storage
      mountPath: /var/lib/containers